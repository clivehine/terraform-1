trigger:
  batch: true
  branches:
    include:
    - master
variables:
- group: terraform-config
stages:
- stage: __default
  jobs:
  - job: Deploy
    continueOnError: false
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: TerraformInstaller@0
      displayName: 'Terraform Install'
      inputs:
        terraformVersion: $(terraformVersion)
    - task: TerraformCLI@0
      displayName: 'Terraform Initialise'
      inputs:
        command: 'init'
        workingDirectory: '$(System.DefaultWorkingDirectory)'
        backendType: 'azurerm'
        backendServiceArm: $(backendServiceArm)
        ensureBackend: true
        backendAzureRmResourceGroupName: $(backendAzureRmResourceGroupName)
        backendAzureRmResourceGroupLocation: $(backendAzureRmResourceGroupLocation)
        backendAzureRmStorageAccountName: $(backendAzureRmStorageAccountName)
        backendAzureRmContainerName: $(backendAzureRmContainerName)
        backendAzureRmKey: $(backendAzureRmKey)
    - task: TerraformCLI@0
      displayName: 'Terraform Validate'
      inputs:
        command: 'validate'
        workingDirectory: '$(System.DefaultWorkingDirectory)'
        environmentServiceName: $(backendServiceArm)
    - task: TerraformCLI@0
      displayName: 'Terraform Plan'
      inputs:
        command: 'plan'
        workingDirectory: '$(System.DefaultWorkingDirectory)'
        environmentServiceName: $(backendServiceArm)
        args: -out=tfplan.out
    - task: TerraformCLI@0
      displayName: 'Terraform Apply'
      inputs:
        command: 'apply'
        workingDirectory: '$(System.DefaultWorkingDirectory)'
        environmentServiceName: $(backendServiceArm)
